// NetworkManager.h
// 서버와의 통신을 관리하는 클래스

#pragma once

#include "CoreMinimal.h"
#include "Subsystems/GameInstanceSubsystem.h"
#include "Networking.h"
#include "Common/TcpSocketBuilder.h"
#include "PacketTypes.h"
#include "NetworkManager.generated.h"

// 게임 상태 변경 시 알림을 받기 위한 델리게이트
DECLARE_DYNAMIC_MULTICAST_DELEGATE_OneParam(FOnConnectionStatusChanged, bool, bIsConnected);
DECLARE_DYNAMIC_MULTICAST_DELEGATE_OneParam(FOnPlayerJoined, int32, PlayerId);
DECLARE_DYNAMIC_MULTICAST_DELEGATE_OneParam(FOnPlayerLeft, int32, PlayerId);
DECLARE_DYNAMIC_MULTICAST_DELEGATE_FiveParams(FOnPlayerPositionUpdated, int32, PlayerId, FTransform, NewTransform, FVector, Velocity, EPlayerState, State, EPlayerAction, Action);
//DECLARE_DYNAMIC_MULTICAST_DELEGATE_TwoParams(FOnPlayerStateChanged, int32, PlayerId, EPlayerState, NewState);
DECLARE_DYNAMIC_MULTICAST_DELEGATE(FOnConnectionError);

/**
 * 게임 인스턴스 서브시스템으로 구현된 네트워크 매니저
 * 서버와의 소켓 통신 및 패킷 처리를 담당
 */
UCLASS()
class MW_API UNetworkManager : public UGameInstanceSubsystem
{
    GENERATED_BODY()

public:
    // UGameInstanceSubsystem 인터페이스
    virtual void Initialize(FSubsystemCollectionBase& Collection) override;
    virtual void Deinitialize() override;

    // 서버 연결 함수
    UFUNCTION(BlueprintCallable, Category = "Network")
    bool ConnectToServer(const FString& IpAddress, int32 Port);

    // 서버 연결 종료 함수
    UFUNCTION(BlueprintCallable, Category = "Network")
    void DisconnectFromServer();

    // 서버에 플레이어 초기화 정보 전송 함수
    void SendPlayerInitInfo(Vec3 Position, Rot3 Rotation);

    // 플레이어 입력 전송 함수 (새 서버 구조에 맞춤)
    void SendPlayerInput(float ForwardValue, float RightValue,
        float RotationPitch, float RotationYaw, float RotationRoll,
        bool bRunPressed, bool bJumpPressed, bool bAttackPressed, bool bDefensePressed);

    // 서버에서 받은 패킷 처리 함수
    void ProcessReceivedData(const TArray<uint8>& Data, int32 BytesRead);

    // 네트워크 업데이트 처리 함수
    void Update();

    // 현재 플레이어 ID 반환
    UFUNCTION(BlueprintPure, Category = "Network")
    int32 GetCurrentPlayerId() const { return CurrentPlayerId; }

    // 연결 상태 확인
    UFUNCTION(BlueprintPure, Category = "Network")
    bool IsConnected() const { return bIsConnected && Socket.IsValid() && Socket->GetConnectionState() == ESocketConnectionState::SCS_Connected; }

    // PING 전송 함수
    void SendPing();

    // 연결 통계
    UFUNCTION(BlueprintPure, Category = "Network")
    float GetPingTime() const { return CurrentPingTime; }

    UFUNCTION(BlueprintPure, Category = "Network")
    float GetLastPongTime() const { return LastPongReceivedTime; }

public:
    // 델리게이트
    UPROPERTY(BlueprintAssignable, Category = "Network|Events")
    FOnConnectionStatusChanged OnConnectionStatusChanged;

    UPROPERTY(BlueprintAssignable, Category = "Network|Events")
    FOnPlayerJoined OnPlayerJoined;

    UPROPERTY(BlueprintAssignable, Category = "Network|Events")
    FOnPlayerLeft OnPlayerLeft;

    UPROPERTY(BlueprintAssignable, Category = "Network|Events")
    FOnPlayerPositionUpdated OnPlayerUpdated;

    //UPROPERTY(BlueprintAssignable, Category = "Network|Events")
    //FOnPlayerStateChanged OnPlayerStateChanged;

    UPROPERTY(BlueprintAssignable, Category = "Network|Events")
    FOnConnectionError OnConnectionError;

private:
    // 패킷 전송 함수
    bool SendPacket(const void* Data, int32 Size);

    // 패킷 타입별 처리 함수
    void HandleClientIdPacket(const ClientIdPacket* Packet);
    void HandleOutputPacket(const OutputPacket* Packet);
    void HandleDisconnectPacket(const DisconnectPacket* Packet);
    void HandlePongPacket(const PongPacket* Packet);

    // 네트워크 타이밍 콜백
    void OnNetworkTimerTick();
    void OnPingTimerTick();

    // 연결 상태 검증
    bool ValidateConnection();

    // 패킷 검증
    bool ValidatePacketHeader(const PacketHeader* Header, int32 AvailableBytes);

private:
    // 소켓 및 연결 관련 변수
    TSharedPtr<FInternetAddr> ServerAddress;
    TSharedPtr<FSocket> Socket;
    bool bIsConnected = false;
    int32 CurrentPlayerId = -1;

    // 수신 버퍼
    TArray<uint8> ReceiveBuffer;

    // 타이밍 핸들
    FTimerHandle NetworkTimerHandle;
    FTimerHandle PingTimerHandle;

    // 마지막 핑/퐁 시간 (새 서버 uint64 타입에 맞춤)
    uint64 LastPingSentTime = 0;
    uint64 LastPongReceivedTime = 0;
    float CurrentPingTime = 0.0f;

    // 패킷 처리를 위한 임시 버퍼
    TArray<uint8> PacketProcessBuffer;

    // 네트워크 통계
    // 네트워크 설정
    UPROPERTY(EditAnywhere, Category = "Network|Settings")
    float NetworkUpdateRate = 100.0f; // 100Hz 네트워크 업데이트

    UPROPERTY(EditAnywhere, Category = "Network|Settings")
    float PingInterval = 1.0f; // 1초마다 핑 전송

    UPROPERTY(EditAnywhere, Category = "Network|Settings")
    float ConnectionTimeout = 30.0f; // 30초 연결 타임아웃

    // int32 대신 uint32로 변경하여 타입 일치시키기
    UPROPERTY(EditAnywhere, Category = "Network|Settings")
    uint32 MaxReceiveBufferSize = 65536; // 64KB 최대 수신 버퍼

    // 디버그 설정
    UPROPERTY(EditAnywhere, Category = "Network|Debug")
    bool bEnableNetworkLogging = false;

    UPROPERTY(EditAnywhere, Category = "Network|Debug")
    bool bLogPacketDetails = false;
};